@model ITProductECommerce.ViewModels.OrderDetailVM

@{
    ViewData["Title"] = "CreateOrderPdf";
}

<!-- Single Page Header start -->
<div class="container-fluid page-header py-5">
    <h1 class="text-center text-white display-6">@Model.OrderId Details</h1>
    <ol class="breadcrumb justify-content-center mb-0">
        <li class="breadcrumb-item"><a asp-controller="Home" asp-action="Index">Home</a></li>
        <li class="breadcrumb-item"><a asp-controller="AdminPanel" asp-action="Index">Admin Panel</a></li>
        <li class="breadcrumb-item"><a asp-controller="AdminPanel" asp-action="OrderPanel">Order Panel</a></li>
        <li class="breadcrumb-item"><a asp-controller="AdminPanel" asp-action="UpdateOrderDetail" asp-route-orderId="@Model.OrderId">@Model.OrderId Details</a></li>
        <li class="breadcrumb-item active text-white">Create PDF</li>
    </ol>
</div>
<!-- Single Page Header End -->

<div class="p-5" id="pdforder">
    <img src="~/static/green_store_logo.jpg" style="width: 200px; height: 200px;" />
    <h4>@Model.OrderId Detail Invoice Shipping</h4>
    <div class="col-sm-2">
        <p>@Model.ReceiverName</p>
    </div>
    <div class="col-sm-2">
        <p>@Model.Address</p>
    </div>
    <div class="col-sm-2">
        <p>@Model.PhoneNumber</p>
    </div>
    <div class="col-sm-2">
        <p>@Model.TypeShipping</p>
    </div>
    <div class="col-sm-2">
        <p>@Model.PaymentMethod</p>
    </div>
    <div class="col-sm-2">
        <p>@Model.OrderDate</p>
    </div>
    <div class="col-sm-2">
        <p>@Model.Note</p>
    </div>
    <button class="btn border-secondary py-3 px-4 text-uppercase w-25 text-primary" onclick="javascript:createPdf();">Create PDF File</button>
</div>

@section Scripts
{
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.3.2/jspdf.min.js"></script>
    <script>
        function createPdf() {
            var pdf = new jsPDF('p', 'pt', 'letter');
            // source can be HTML-formatted string, or a reference
            // to an actual DOM element from which the text will be scraped.
            source = $('#pdforder')[0];

            // we support special element handlers. Register them with jQuery-style
            // ID selector for either ID or node name. ("#iAmID", "div", "span" etc.)
            // There is no support for any other type of selectors
            // (class, of compound) at this time.
            specialElementHandlers = {
                // element with id of "bypass" - jQuery style selector
                '#bypassme': function (element, renderer) {
                    // true = "handled elsewhere, bypass text extraction"
                    return true
                }
            };
            margins = {
                top: 80,
                bottom: 60,
                left: 40,
                width: 522
            };
            // all coords and widths are in jsPDF instance's declared units
            // 'inches' in this case
            pdf.fromHTML(
                source, // HTML string or DOM elem ref.
                margins.left, // x coord
                margins.top, { // y coord
                'width': margins.width, // max width of content on PDF
                'elementHandlers': specialElementHandlers
            },

                function (dispose) {
                    // dispose: object with X, Y of the last line add to the PDF
                    //          this allow the insertion of new lines after html
                    pdf.save('@Model.OrderId _ @Model.OrderDate .pdf');
                }, margins);
        }
    </script>
}
